//Каким будет результат выполнения этого кода?

let user = {
    name: "Джон",
    go: function () { alert(this.name) }
}

    (user.go)()

//Решение
//Ошибка.Нет точки с запятой!
//Происходит вызов объекта с параметром (user.go)





//В представленном ниже коде мы намерены вызвать user.go() метод 4 раза подряд.
//Но вызовы (1) и (2) работают иначе, чем (3) и (4). Почему?

let obj, method;

obj = {
    go: function () { alert(this); }
};

obj.go();               // (1) [object Object]

(obj.go)();             // (2) [object Object]

(method = obj.go)();    // (3) undefined

(obj.go || obj.stop)(); // (4) undefined

//Первые два - это обычный вызов метода объекта
//В 3 случае мы присвоили переменной метод обекта без самого объекта,
//поэтому его this  не работает
//В 4 случае потеря значения this, как и в 3
//В 3 и 4 возвращает спец.значения ссылочного типа




//Здесь функция makeUser возвращает объект.
//Каким будет результат при обращении к свойству объекта ref? Почему?

function makeUser() {
    return {
        name: "Джон",
        ref: this
    };
};

let user = makeUser();

alert(user.ref.name); // Каким будет результат?

//Решение
//ошибка, так как this вызывается внутри функции, 
//которая не является методом никакого другого объекта, кроме window.
//Если бы после ref стояли скобки, то есть он вызывался бы как метод, тогда this
//сработал бы. И ответом был бы Джон.





//Создайте объект calculator (калькулятор) с тремя методами:
//read() (читать) запрашивает два значения и сохраняет их как свойства объекта.
//sum() (суммировать) возвращает сумму сохранённых значений.
//mul() (умножить) перемножает сохранённые значения и возвращает результат.

//Решение

let num1 = +prompt('Введите первое число', '');
let num2 = +prompt('Введите второе число', '');


let calculator = {
    read() {
        return this.num1 = num1, this.num2 = num2;
    },
    sum() {
        return this.num1 + this.num2;
    },
    mul() {
        return this.num1 * this.num2;
    }
};

calculator.read();
alert('Сумма числел: ' + calculator.sum());
alert('Произведение числел: ' + calculator.mul());




//Это ladder (лестница) – объект, который позволяет
//подниматься вверх и спускаться:

let ladder = {
    step: 0,
    
    up() {
        this.step++;
        return this;
    },
    down() {
        this.step--;
        return this;
    },
    showStep: function () { // показывает текущую ступеньку
        alert(this.step);
        return this;
    }
};


ladder.up().up().down().showStep(); // 1

//Теперь, если нам нужно сделать несколько последовательных вызовов, 
//мы можем выполнить это так:

ladder.up();
ladder.up();
ladder.down();
ladder.showStep(); // 1

//Измените код методов up, down и showStep таким образом, чтобы их вызов
//можно было сделать по цепочке, например так:

ladder.up().up().down().showStep(); // 1
//Такой подход широко используется в библиотеках JavaScript.